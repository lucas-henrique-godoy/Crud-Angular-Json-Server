						**PROJETO CRUD ANGULAR E JSON SERVER - CADASTRO DE PRODUTOS

Tecnologias utilizadas:
- Angular CLI: 9.1.15
- Node: 12.22.12
_______________________________________________________________________________________________________________________________________________________________________
		
#SEÇÃO - BACKEND DO PROJETO

- Criar uma pasta raiz para o projeto, neste caso foi crud.

- Dentro da pasta crud, criar uma pasta chamada backend.

-Dentro da pasta backend, rodar o comando para criar o arquivo package.json, que contem as dependências do projeto, com os valores padrão: npm init -y.

-Também dentro da pasta backend, rodar o comando npm i json-server: instala localmente na pasta o pacote json-server, que permite criar uma API REST fake rapidinho para testes e prototipação, e já o coloca no arquivo package.json criado anteriormente.

-Dentro da pasta backend, criar  arquivo db.json, onde criamos um objeto, e dentro deste objeto vai ter todos os endpoints da API. Criou 3 objetos(produtos) com as propriedades de id, nome, preço. O arquivo db.json funciona como um banco de dados fake quando usado com o json-server. Ele simula uma API REST completa (com rotas GET, POST, PUT, DELETE) sem precisar de backend real. É útil para testes e protótipos de frontend.

-Dentro do arquivo package.json criou um script para iniciar o db.json. Comando: 
"scripts": {
    "start": "json-server --watch db.json --port 3001"    
  },

Basicamente esse script chama o json-server que foi instalado anteriormente, colocou para ele ficar monitorando o arquivo db.jon na porta 3001. Agora a API esta funcional.

-Dentro da pasta backend, colocar o comando npm start para rodar a API.

_______________________________________________________________________________________________________________________________________________________________________

*TIVE UM ERRO DEPOIS DE CRIAR O DB.JSON E RODAR A API:

✅ Resumo do erro e solução
Erro:
Você recebeu o erro SyntaxError: Unexpected token '?' ao rodar npm start. Isso aconteceu porque o pacote json-server usa o operador ?? (nullish coalescing), que não é suportado pelo Node.js 12, a versão que você está usando.

Causa:
Seu Node.js está desatualizado (versão 12), e o json-server instalado foi desenvolvido para versões mais recentes do Node (14+).

Solução aplicada:
Desinstalamos a versão atual do json-server e instalamos uma versão mais antiga e compatível com Node 12, assim:

-Desinstala a versão atual do json-erver: npm uninstall json-server

-Instala aversão do jso-server compatível com o Node 12: npm install json-server@0.16.3 --save-dev

Depois disso, npm start funcionou corretamente com a sua versão atual do Node.js.
_______________________________________________________________________________________________________________________________________________________________________

			# SEÇÃO - FRONTEND DO PROJETO

**VISÃO GERAL ANGULAR

- O que é Angular? Um framework JavaScript desenvolvido pelo Google para criação de aplicações Web SPA(Single Page Application) baseada em componentes.

- Command Line Interface(CLI)- Interface de linha de comando do Angular. Para instalar rodar  comando: npm i -g @angular/cli.

-Para criar um novo projeto Angular, rodar o comando: ng new minha-app.

- Typescript: Linguagem criada pela Microsoft, que é um superset do JavaScript, onde possuí todas as funcionalidades do JavaScript, mas tem outras como Tipagem Forte e é Orientada a Objetos. No Angular, o código escrito em Typescript é compilado para JavaScript.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

**Árvore de Componentes: A partir do componente principal(raiz ou pai) que no Angular normalmente se chama app.component, você referencia outros componentes como: Formulário, Header, um componente de navegação, um componente que representa o conteúdo, etc.
_______________________________________________________________________________________________________________________________________________________________________

**Conceitos Essenciais- Inicialização da Aplicação:

- Arquivo main.ts: É o primeiro arquivo que será chamado para inicializar a aplicação Angular.

- Arquivo app.module: Arquivo que é chamado pelo main.ts para inicializar a aplicação. A aplicação Angular é organizada em componentes, ou seja uma grande árvore de componentes. Esses componentes são organizados dentro de módulos, a aplicação é modularizada. Os módulos por sua vez, nos dão alguns "poderes", como por exemplo criar determinados componentes que estão visíveis apenas dentro do módulo. Isso traz um maior nível de encapsulamento. Exemplo: Imagine que você tem um determinado componente que é um componente que não pode ser usado fora de determinada situação(ele não pode ser usado no sistema inteiro), então podemos coloca-lo dentro de um módulo e ele ficar visível apenas dentro daquele módulo. Dentro do arquivo app.module tem a um atributo chamado bootstrap que também serve para inicializar a aplicação e aponta para o app.component que é o que é criado por padrão.

- Arquivo app.component: É o componente que é criado por padrão, onde a partir dele  toda a árvore de componentes será chamada.
_______________________________________________________________________________________________________________________________________________________________________

**O que é um componente? É como um pedaço da aplicação, um trecho de código que representa um componente visual da sua tela. Um componente é composto por um arquivo HTML, CSS e TS. Ou seja,  estrutura(HTML), estilo(CSS), comportamento(TS). Quando um componente é criado, é gerado uma tag personalizada, exemplo o componente home.component gera a tag <app-home><app-home>,essa é a forma para referenciar todo o código HTML, CSS  e TS 	que foi criado. A ideia é encapsular dentro desse componente as três tecnologias da WEB.

-Arquivo TS: É o arquivo de comportamento do componente, a partir dele é que o Angular irá encontrar os arquivos HTML e CSS, pois ele faz uma referencia, então quando criamos um componentes pelo menos devemos ter o arquivo TS.

**Organização Usando Módulo: O Angular não organiza a aplicação somente em componentes, mas também em módulos, isso significa que todos os componentes irão estar dentro de algum módulo, seja um único módulo para toda a aplicação, como numa aplicação pequena todos os componentes podem ficar dentro de app.module(módulo principal criado por padrão), como é o caso deste projeto. Mas podemos organizar nossa aplicação em diversos módulos. Desse modo, quando você criar um componente dentro do módulo, você tem a escolha de dizer se aquele componente ficará visível para fora do módulo, ou seja alguém de fora do módulo pode referenciar aquele componente, ou seja ,você pode dizer que aquele componente vai ficar visível  apenas dentro do módulo.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Anatomia do módulo: 

- Dentro do arquivo app.module tem 5 atributos: Declarations, Imports, Exports, Providers, Bootstrap.

O que devemos colocar dentro de cada um desses atributos?

-Declarations: Declara todos os componentes que fazem parte daquele módulo; declarar diretivas que fazem parte daquele módulo; declarar os pipes que fazem parte daquele módulo. Neste projeto, será usado para declarar principalmente os componentes que fazem parte daquele módulo. Quando dizemos que um componente faz patê de um módulo, não necessariamente ele é visível para fora do módulo, você deve colocar esse componente também dentro de exports.

-Imports: Serve para importar outros módulos, ou seja, um módulo pode depender de outro módulo, podendo ser um módulo da própria aplicação ou um módulo externo. Podemos importar dependências e bibliotecas.

-Exports: Serve para declarar componentes, diretivas e pipes que podem ser visíveis para fora do módulo.

-Providers: Serve para declarar os services.

-Bootstrap: É onde tem a referência do componente principal que será carregado, sendo necessário apenas para 1 único módulo, que é o módulo inicial da aplicação, o app.module. No caso do app.module, não precisamos exportar nada, os outros módulos é que vão exportar para o app.module utilizar, ou seja o app.module importa os outros módulos.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-OBS: Quando dizemos que um componente faz parte de um módulo, não necessariamente ele é visível para fora do módulo. Para tornar um componente visível para fora do módulo, ele deve ser colocado dentro de exports.
_______________________________________________________________________________________________________________________________________________________________________

**Instalando e criando projeto Angular

-Instalando a cli do Angular. Comando: npm i -g @angular/cli

- Criando um projeto Angular: ng new nome-projeto
- Criando um projeto Angular sem arquivos desnecessários como arquivos de teste: ng new nome-projeto --minimal